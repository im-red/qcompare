

    首页
    博客
    学院
    下载
    图文课
    论坛
    APP
    问答
    商城
    VIP会员
    活动
    招聘
    ITeye
    GitChat

    写博客
    小程序
    消息

原	
Linux C/C++调试之二：使用strace追踪程序系统调用
2019年03月02日 18:27:42 imred 阅读数：106
编辑
版权声明：转载请注明来源： https://blog.csdn.net/imred/article/details/88079459

在之前的一篇文章中，我介绍了一种调试手段：利用LD_PRELOAD机制，拦截动态链接器对动态库的符号解析，达到监控程序IO的目的。事实证明我还是太naive了，我们大可利用现成的工具——strace，来更好地完成这一项工作。

strace不只能跟踪程序IO，它能跟踪程序的所有系统调用，实现的基本手段是ptrace系统调用，不过实现细节还没研究过，今天只总结一下它的用法。

首先用strace来跟踪一下喜闻乐见的hello world：

#include <stdio.h>

int main()
{
    printf("Hello, world!\n");
    return 0;
}

    1
    2
    3
    4
    5
    6
    7

$ gcc main.c -o main
$ strace ./main

    1
    2

输出是这样的（由于太长，省略了大部分内容）：

execve("./main", ["./main"], 0x7ffcea3db620 /* 33 vars */) = 0

......(太长省略)

write(1, "Hello, world!\n", 14Hello, world!
)         = 14
exit_group(0)                           = ?
+++ exited with 0 +++

    1
    2
    3
    4
    5
    6
    7
    8

所有系统调用被一一记录了下来，我们可以看出来，printf是通过write系统调用将字符串“Hello, world!\n”写到文件描述符为1的文件（即标准输出）中，从而输出到屏幕上的。

这就是strace最基本的用法，它还提供一些非常实用的参数，我们可以来看一下：
-e

这个参数可以用来过滤输出，它功能很多，具体可以查看strace的手册，我们只用其最基本的功能：跟踪特定的系统调用。

$ strace -e write ./main

    1

输出瞬间清爽了：

write(1, "Hello, world!\n", 14Hello, world!
)         = 14
+++ exited with 0 +++

    1
    2
    3

-k

这个参数可以用来输出堆栈，不过strace的帮助将其标记为了实验性功能。

$ strace -e write -k ./main

    1

输出为：

write(1, "Hello, world!\n", 14Hello, world!
)         = 14
 > /lib/x86_64-linux-gnu/libc-2.27.so(__write+0x14) [0x110154]
 > /lib/x86_64-linux-gnu/libc-2.27.so(_IO_file_write+0x2d) [0x8b1bd]
 > /lib/x86_64-linux-gnu/libc-2.27.so(_IO_do_write+0xb1) [0x8cf51]
 > /lib/x86_64-linux-gnu/libc-2.27.so(_IO_file_overflow+0x103) [0x8d403]
 > /lib/x86_64-linux-gnu/libc-2.27.so(_IO_puts+0x1a2) [0x80b62]
 > /home/imred/Documents/Workspace/playground/strace_blog/main(main+0x10) [0x64a]
 > /lib/x86_64-linux-gnu/libc-2.27.so(__libc_start_main+0xe7) [0x21b97]
 > /home/imred/Documents/Workspace/playground/strace_blog/main(_start+0x2a) [0x55a]
+++ exited with 0 +++

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11

-t/-tt

这组参数可以用来打印时间戳
-y

这个参数可以在打印文件描述符相关参数时同时把文件描述符对应的文件路径打印出来：

$ strace -e write -y ./main

    1

输出为：

write(1</dev/pts/0>, "Hello, world!\n", 14Hello, world!
) = 14
+++ exited with 0 +++

    1
    2
    3

可以看出来当前内容被输出到了序号为0的伪终端。

由于下面的参数与时间统计有关，所以最好调用耗时较长的系统调用来分析其作用，我使用的是usleep函数，它调用了nanosleep系统调用，代码为：

#include <unistd.h>

int main()
{
    for (int i = 0; i < 10; i++)
    {
        usleep(1000);
    }
    return 0;
}

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10

-T

这个参数可以用来输出每个系统耗费的时间，这个时间是系统调用开始时间和结束时间之差。

$ strace -e nanosleep -T ./main

    1

输出为：

nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001089>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001078>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001972>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001108>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001139>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001091>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001093>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001326>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001029>
nanosleep({tv_sec=0, tv_nsec=1000000}, NULL) = 0 <0.001297>
+++ exited with 0 +++

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11

看出来这时间统计的算不上十分准确，最大的误差甚至接近100%，不过这是strace的问题还是系统调用本身的问题并不确定，也还有可能是我使用了虚拟机的缘故。
-c

这个参数用来汇总系统调用的数据。

$ strace -c ./main

    1

输出为：

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
  0.00    0.000000           0         1           read
  0.00    0.000000           0         2           close
  0.00    0.000000           0         8         7 stat
  0.00    0.000000           0         2           fstat
  0.00    0.000000           0         5           mmap
  0.00    0.000000           0         4           mprotect
  0.00    0.000000           0         1           munmap
  0.00    0.000000           0         1           brk
  0.00    0.000000           0         3         3 access
  0.00    0.000000           0        10           nanosleep
  0.00    0.000000           0         1           execve
  0.00    0.000000           0         1           arch_prctl
  0.00    0.000000           0        10         8 openat
------ ----------- ----------- --------- --------- ----------------
100.00    0.000000                    49        18 total

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17

能够分析出每种系统调用总的相对时间、总的绝对时间、平均开销、调用次数、出错次数信息。

你可能会比较奇怪为什么上面汇总出来的时间消耗都是0，至少nanosleep该消耗了时间。这是因为在默认情况下统计的都是系统时间，即进程在内核空间执行代码消耗的cpu时间，而不是墙上时间。调用了nanosleep虽然消耗了用户的时间，但并没有占用多少cpu时间，所以统计出来就是0了，如果要统计墙上时间，需要下面的这个选项。
-w

这个参数指定-c参数统计墙上时间。

$ strace -wc ./main

    1

输出为：

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 97.95    0.015065        1507        10           nanosleep
  0.64    0.000098          98         1           execve
  0.38    0.000058           6        10         8 openat
  0.24    0.000037           5         8         7 stat
  0.20    0.000031           6         5           mmap
  0.18    0.000028           7         4           mprotect
  0.11    0.000017           6         3         3 access
  0.10    0.000016          16         1           munmap
  0.06    0.000009           5         2           fstat
  0.05    0.000008           4         2           close
  0.03    0.000005           5         1           read
  0.03    0.000005           5         1           brk
  0.03    0.000004           4         1           arch_prctl
------ ----------- ----------- --------- --------- ----------------
100.00    0.015381                    49        18 total

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17

这回输出结果大致符合我们的预期了（虽然误差很大）。
-f

这个参数指定strace要跟踪从主线程衍生出来的其他线程和进程。

对于下面的程序：

#include <thread>
#include <unistd.h>

void loopSleep()
{
    for (int i = 0; i < 10; i++)
    {
        usleep(1000);
    }
}

int main()
{
    std::thread t1([](){ loopSleep(); });
    std::thread t2([](){ loopSleep(); });

    t1.join();
    t2.join();

    return 0;
}

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    20
    21

nanosleep都没有在主线程调用，如果我们直接这样调用strace的话：

$ strace -e nanosleep ./main

    1

其输出为：

+++ exited with 0 +++

    1

并没有追踪到nanosleep的调用。这时就需要指定-f参数了：

$ strace -e nanosleep -f ./main

    1

其输出为：

strace: Process 4623 attached
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000}, strace: Process 4622 attached
 <unfinished ...>
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] nanosleep({tv_sec=0, tv_nsec=1000000},  <unfinished ...>
[pid  4623] <... nanosleep resumed> NULL) = 0
[pid  4623] +++ exited with 0 +++
[pid  4622] <... nanosleep resumed> NULL) = 0
[pid  4622] +++ exited with 0 +++
+++ exited with 0 +++

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    20
    21
    22
    23
    24
    25
    26
    27
    28
    29
    30
    31
    32
    33
    34
    35
    36
    37
    38
    39
    40
    41
    42
    43
    44
    45

追踪到了我们指定的nanosleep系统调用。
-p

这个参数指定strace连接到指定进程上。

以上就是strace这把“锤子”的大致使用手册，但是如何把我们当前遇到的问题归约成“钉子”就没有手册可以参考了，需要各位各显神通了。
阅读更多 收藏 分享
用strace查找进程卡死原因

5347

最近遇到进程卡死的情况，但是自己调试的过程中并不一定能复现，都是需要运行一段时间某些条件下才会触发，对于这种运行着不能破坏现场的情况，我们可以使用gdb-p和strace-p来跟踪。首先我们用psau...
来自： peng314899581
linux调试工具——strace	

阅读数 57

当然C/C++的最基本的调度工具当属gdb。此处讲解一下strace用法。1、系统调用如创建文件、进程和复制文件等操作系统提供的服务，需要应用程序和操作系统之间进行交互。但是，问题在于，应用程序不能直... 博文
来自： 爱吃_宫爆鸡丁
C/C++如何判断一个程序时候进行系统调用	
05-12

现在遇到的问题就是执行一些windows程序主要是.EXE程序 但必须保证检查EXE文件时候存在非法的系统调用例如 关机、删除文件等调用。如果执行了这些调用就将进程杀掉； 关键是现在不知道如何用C或C 论坛
使用strace追踪程序的系统调用	

阅读数 1142

strace命令主要是追踪程序的系统的调用，可执行文件 helloworld由（makefile基础学习  http://blog.csdn.net/zhouzhenhe2008/article/de... 博文
来自： 烟花易冷
应用调试之使用strace命令跟踪系统调用	

阅读数 1368

一、安装：1、解压：tarxvf strace-4.5.15.tar.bz2 2、打补丁：cdstrace-4.5.15           patch-p1---是原来的文件，+++是修改后的文件，... 博文
来自： qingkongyeyue的博客
linux strace命令--跟踪系统调用	

阅读数 3855

简介strace常用来跟踪进程执行时的系统调用和所接收的信号。在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模... 博文
来自： jk110333的专栏
常用性能分析工具之perf，strace	

阅读数 511

﻿﻿1)Perf基于事件采样原理，以性能事件为基础，支持针对处理器相关性能指标与操作系统相关性能指标的性能剖析。常用于性能瓶颈的查找与热点代码的定位。 a）perf-stat常用统计信息： #Task... 博文
来自： qq_23032819的博客
用strace工具跟踪系统调用	

阅读数 1170

1、先解压：    strace-4.8.tar.xz 由于在ubuntu上没有装xz后缀的压缩文件的解压工具，可先直接在windows下解压　2、拷贝到服务器上去3、修改strace-4.8目录下的... 博文
来自： qingkongyeyue的博客
Linux strace命令---跟踪程序执行

阅读数 7472

简介strace常用来跟踪进程执行时的系统调用和所接收的信号。在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模... 博文
来自： 可克技术
Linux strace工具，进程诊断、排错、跟踪系统调用和信号量

阅读数 1687

Linuxstrace工具，进程诊断、排错、跟踪系统调用和信号量 博文
来自： Seandba的博客
strace命令，跟踪系统调用以及库依赖

阅读数 1619

简介strace常用来跟踪进程执行时的系统调用和所接收的信号。在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模... 博文
来自： a2796749的专栏
stpeace
关注
stpeace

2399篇文章

排名:1

s1mba
关注
s1mba

255篇文章

排名:678

UsherYue
关注
UsherYue

447篇文章

排名:1000+

qingkongyeyue关注
qingkongyeyue

682篇文章

排名:2000+

strace调试	

阅读数 1407

2012-03-23wcdj在GNU/Linux环境下，当程序出现“疑难杂症”的时候，如何快速定位问题呢？本文介绍strace/ltrace的一些使用方法，内容主要来自个人的读书笔记（可见参考文献）。... 博文
来自： linux
Linux 中用 strace 追踪系统调用和信号值 （原文棒棒哒）

阅读数 6239

间接转载地址：http://www.cnblogs.com/itech/archive/2013/02/28/2937836.html     什么是strace打开manstrace，我们能看到对s... 博文
来自： stpeace的专栏
php-fpm生产环境下的调试strace	

阅读数 472

以前，在对php进行性能问题分析时，主要是依赖xhprof对php性能瓶颈进行分析，而这需要侵入代码。今天遇到了需要在生产环境下找出fpm问题的需求，这种情况下，在网上查找了下方案，发现了strace... 博文
来自： Gavin_new的博客
strace统计程序系统调用	

阅读数 3132

在Linux中如果发现服务器的CPU消耗过大的时候，我们可以通过strace这个Linux的基础设施来检查服务器系统调用是否过多消耗服务器的资源。这个是排除掉了自己逻辑相关的一个视角来观看服务器的性能... 博文
来自： Abel's Blog
Linux strace 命令用法详解:跟踪系统调用和信号

阅读数 904

 原文地址： http://man.linuxde.net/strace 博文
来自： 飘过的春风
ls -l |grep "^-"|wc -l 程序问题的定位—strace -p pid(跟踪系统调用)gdb -p pid(调试)lsof -p pid(查看当前进程打开的文件描述符) ps -e

阅读数 2945

查看某文件夹下文件的个数ls-l|grep"^-"|wc-l或find./company-typef|wc-l查看某文件夹下文件的个数，包括子文件夹里的。ls-lR|grep"^-"|wc-l查看某文... 博文
来自： tycoon的专栏
通过strace和monkey测试安卓应用的系统调用	

阅读数 300

配置adb1.    下载androidstudio2.    增加系统变量https://blog.csdn.net/lxzmmd/article/details/50455671 配置x86安卓虚... 博文
来自： 每天都要元气满满
用户态调测工具（一）：strace和ltrace

阅读数 361

简单科普：Linux的用户态和内核态Linux操作系统的体系架构分为用户态和内核态（或者用户空间和内核）。内核从本质上看是一种软件–控制计算机的硬件资源，并提供上层应用程序运行的环境。用户态即上层应用... 博文
来自： cui841923894的博客
程序跟踪系统调用神器之- strace	

阅读数 175

这里只是简单的提及下，所以工欲善其事必先利其器，要想很快的查找和定位问题，此工具必不可少，特别是对于底层的调用，而GDB又很难跟踪的case，具体的用法就不介绍了，网上有很多。...... 博文
来自： cddchina的专栏
Strace调试详解

阅读数 594

简介strace常用来跟踪进程执行时的系统调用和所接收的信号。在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模... 博文
来自： yangrendong的专栏
Android下打印调试堆栈方法总结以及strace工具使用	

阅读数 2898

打印堆栈是调试的常用方法，一般在系统异常时，我们可以将异常情况下的堆栈打印出来，这样十分方便错误查找。实际上还有另外一个非常有用的功能：分析代码的行为。android代码太过庞大复杂了，完全的静态分析... 博文
来自： sunnytina的专栏
clock_gettime（系统调用）

阅读数 1277

linux中可以使用clock_gettime系统调用来获取系统时间（秒数与纳秒数）。纳秒为一秒的十亿分之一。#includeintclock_gettime(clockid_tclk_id,stru... 博文
来自： pk_20140716的专栏
查看系统调用和信号的命令--strace	

阅读数 909

strace命令用法调用: strace[-dffhiqrtttTvxx][-acolumn][-eexpr]... [-ofile][-ppid]...[-sstrsize][-uusername]... 博文
来自： DIYing
使用strace跟踪多进程程序

阅读数 2047

简介strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。常用参数-p跟踪指定的进程-ofilename默认strace将结果输出到stdout。通过-o可以将输出写入到fi... 博文
来自： IT民工的小日子
linux环境常用的性能监控和协助开发调试工具

阅读数 4303

linux有诸多优秀的工具帮助我们分析服务器各项性能指标和协助开发调试工作。下面只列举比较基础的命令，且一般是集成在linux环境中而不需再次安装的命令。更多更详细的命令可以参考 https://gi... 博文
来自： Meditation
Linux下C编程-----文件操作(1) 通过系统调用简单操作标准输入、标准输出、标准错误

阅读数 3953

Linux的C系统调用操作 ,下面我们就来练习下简单的系统调用操作read系统调用测试/********************************************************... 博文
来自： Programmer小卫
strace工具的实现原理

阅读数 5401

strace是Linux系统下的一个用来跟踪系统调用的工具，它的实现基础是ptrace系统调用。使用strace工具可以跟踪一个程序执行过程中发生的系统调用。... 博文
来自： 落尘纷扰的专栏
使用strace监视系统调用	

阅读数 1763

strace是一个必不可少的调试工具，strace用来监视系统调用。这个工具在系统负载非常高的时候，可以用来查看到底系统在做什么。你可以了解到系统在用户态和内核态是如何通过系统调用和信号来实现程序的功... 博文
来自： 大鹏
强大的strace命令用法详解

阅读数 2567

strace是什么？按照strace官网的描述,strace是一个可用于诊断、调试和教学的Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。st... 博文
来自： cs729298的博客
Linux C高级编程——文件操作之系统调用	

阅读数 2802

LinuxC高级编程文件操作之系统调用宗旨：技术的学习是有限的，分享的精神的无限的！     库函数是一些完成特定功能的函数，一般由某个标准组织制作发布，并形成一定的标准。使用库函数编写的函数一般可以... 博文
来自： 血染风采2019
strace,ltrace linux下跟踪进程调用的命令

阅读数 2672

原文链接：http://zhuhaibobb.blog.163.com/blog/static/27440067201182591651723/ 本工具可以用来做大多数排除,比如mount一个NFS，... 博文
来自： Mr.pan felix的专栏
shell学习五十四天----进程系统调用的追踪strace	

阅读数 3134

strace前言:strace常用来跟踪进程执行时的系统调用的所接受的信号.在linux世界,进程是不能直接访问硬件设备,当进程需要访问硬件(比如读取磁盘文件,接收网络数据等等)时,必须由用户态模式切... 博文
来自： 见证大牛成长之路的专栏
使用strace,lstrace,truss来跟踪程序的运行过程

阅读数 5671

转载：http://hi.baidu.com/phps/blog/item/84c44a4a5211a22608f7efc6.html 使用truss、strace或ltrace诊断软件问题2008-... 博文
来自： 无与伦比BLOG
Strace诊断CPU跑高问题

阅读数 2459

手把手教你用Strace诊断问题发表于2015-10-16早些年，如果你知道有个strace命令，就很牛了，而现在大家基本都知道strace了，如果你遇到性能问题求助别人，十有八九会建议你用strac... 博文
来自： linzx0403的专栏
Linux C 库函数与系统调用的区别

阅读数 412

以下是对linux中系统调用与标准库调用的区别进行了详细的分析介绍，需要的朋友可以过来参考下1、系统调用和库函数的关系 系统调用通过软中断int0x80从用户态进入内核态。函数库中的某些函数调用了系统... 博文
来自： An1540879349的博客
【C/C++】【Linux】Linux系统调用——文件访问

阅读数 320

Linux系统调用——文件访问 函数用法 #include&amp;lt;sys/types.h&amp;gt; #include&amp;lt;sys/stat.h&amp;gt; ... 博文
来自： 乞木的博客
c/c++ linux调试工具

阅读数 2047

原文地址：http://blog.csdn.net/bugouyonggan/article/details/194839991. 使用printf调试#ifdefDEBUGPrintf(“valri... 博文
来自： 风之伤
运维利器：万能的 strace	

阅读数 1578

strace是什么？按照strace官网的描述,strace是一个可用于诊断、调试和教学的Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。... 博文
来自： u012719556的专栏
strace工具跟踪系统调用和信号

阅读数 1082

*掌握使用strace工具跟踪系统调用和信号的方法*掌握各类内存测试工具，比如memwatch（是不是和那个）*掌握使用库函数backtrace和backtrace_sysbols来定位段错误一、使用... 博文
来自： Win_cao专栏
linux-系统调用02-系统调用与C库函数的区别

阅读数 559

系统调用与C库函数的区别操作系统的核心是内核，内核控制系统的软硬件资源。必要时分配硬件，需要时执行软件。通过系统调用访问内核，获取想要的资源。1系统调用分类：（内核4大模块）.内存管理（cat/pro... 博文
来自： you
跟踪linux里的命令的系统调用strace	

阅读数 369

跟踪linux里的命令的系统调用strace 博文
来自： tiantang46800的专栏
利用pstack 和 strace分析程序在哪里耗时？

阅读数 5218

目前测试了nws服务器代码中的while(!stop){...}死循环，发现while循环一次有的线程需要100ms左右，这个时间就有点长了。于是利用如下linux的ps、pstack和strace对... 博文
来自： lotluck的专栏
使用strace和ltrace跟踪程序调用

阅读数 2397

ltrace能够跟踪进程的库函数调用,它会显现出哪个库函数被调用,而strace则是跟踪程序的每个系统调用.1.系统调用的输出对比程序代码：#includemain(){ charstr[]="Abc... 博文
来自： 编程的本质是数学问题
strace-4.11 源码 12-05
strace-4.11 源码。 strace是一个可用于诊断、调试和教学的Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等
下载
linux c语言 system系统调用与popen的使用	

阅读数 2841

system系统调用有很多诟病，很多人推荐使用popen1.popen的函数原型为：#includeFILE*popen(constchar*command,constchar*type);popen... 博文
来自： enockipp的小'码'头
嵌入式工具——strace	

阅读数 146

strace 博文
来自： heliangbin87的专栏
Linux调试工具strace和gdb常用命令小结-转

阅读数 383

Linux环境下段错误的产生原因及调试方法小结最近在Linux环境下做C语言项目，由于是在一个原有项目基础之上进行二次开发，而且项目工程庞大复杂，出现了不少问题，其中遇到最多、花费时间最长的问题就是著... 博文
来自： xp5xp6的博客
Linux-（C）文件读写实例（系统调用/标准I/O库）

阅读数 7168

从实现的角度：系统调用直接对文件和设备进行访问和控制的的一组底层接口，而标准I/O库为地城I/O调用提供了一个通用的接口，系统调用直接跟底层打交道，系统调用移植性远不如标准I/O库好。从性能的角度：使... 博文
来自： 爱拼才会赢
【C/C++】【Linux】Linux系统调用——线程控制

阅读数 93

Linux系统调用——线程控制什么叫线程？线程是CPU调度和分派的基本单位。是比进程更小的能独立运行的基本单位。除了一点在运行中必不可少的资源(如程序计数器，一组寄存器和栈)，线程基本上不拥有系统资源... 博文
来自： 乞木的博客
Android实战技巧之三十三：android.hardware.camera2使用指南

阅读数 6万+

API 21中将原来的camera API弃用转而推荐使用新增的camera2 API，这是一个大的动作，因为新API换了架构，让开发者用起来更难了。 先来看看camera2包架构示意图： 这... 博文
来自： 懒人的技术笔记
使用Faster-Rcnn进行目标检测(实践篇)

阅读数 6万+

原理上一篇文章，已经说过了，大家可以参考一下，Faster-Rcnn进行目标检测(原理篇)实验我使用的代码是python版本的Faster Rcnn，官方也有Matlab版本的,链接如下:py-fas... 博文
来自： GavinZhou的博客
DirectX修复工具增强版

阅读数 193万+

最后更新：2018-12-20 DirectX修复工具最新版：DirectX Repair V3.8 增强版  NEW! 版本号：V3.8.0.11638 大小: 107MB/7z格式压缩，18... 博文
来自： VBcom的专栏
C/C++ 实现文件透明加解密

阅读数 1万+

　　  今日遇见一个开超市的朋友，真没想到在高校开超市一个月可以达到月净利润50K，相比起我们程序员的工资，真是不可同日而语，这个世道啊，真是做程序员不如经商开超市，我们高科技的从业者，真是造原子弹不... 博文
来自： 尹成的技术博客
【深度剖析HMM（附Python代码）】1.前言及隐马尔科夫链HMM的背景

阅读数 1万+

1. 前言 隐马尔科夫HMM模型是一类重要的机器学习方法，其主要用于序列数据的分析，广泛应用于语音识别、文本翻译、序列预测、中文分词等多个领域。虽然近年来，由于RNN等深度学习方法的发展，HMM模型... 博文
来自： tostq的专栏
squirrel校园二手交易平台

阅读数 1万+

squirrel校园二手交易平台 （适合寻找SSM项目练手的你。） 项目起源： 　　期末的课程设计，三人一组，我和两个舍友，一时起兴，决定做一个校园二手交易平台，一开始兴致与激情满满，可... 博文
来自： HLK_1135的博客
关于requests的session方法无法保持cookie的问题。

阅读数 3万+

最近在做爬虫的时候遇到了一个问题，在用requests的session方法保持cookie的时候发现requests不能保持手动构建的cookie。起初以为requests只能自动保持由服务器返回的s... 博文
来自： falseen的博客
QEMU 简单使用

阅读数 8418

安装： yum install qemu 创建image文件： qemu-img create -f qcow2 guest.qcow2 3G 安装linux： 1）下载一个镜像文件，http:... 博文
来自： 务远的博客
搭建图片服务器《二》-linux安装nginx

阅读数 3万+

nginx是个好东西，Nginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambl... 博文
来自： maoyuanming0806的博客
linux上安装Docker(非常简单的安装方法)

阅读数 20万+

最近比较有空，大四出来实习几个月了，作为实习狗的我，被叫去研究Docker了，汗汗！ Docker的三大核心概念：镜像、容器、仓库 镜像：类似虚拟机的镜像、用俗话说就是安装文件。 容器：类似一个轻量... 博文
来自： 我走小路的博客
强连通分量及缩点tarjan算法解析

阅读数 57万+

强连通分量： 简言之 就是找环（每条边只走一次，两两可达） 孤立的一个点也是一个连通分量   使用tarjan算法 在嵌套的多个环中优先得到最大环( 最小环就是每个孤立点）   定义： int Ti... 博文
来自： 九野的博客
LSTM简介以及数学推导(FULL BPTT)

阅读数 8万+

前段时间看了一些关于LSTM方面的论文，一直准备记录一下学习过程的，因为其他事儿，一直拖到了现在，记忆又快模糊了。现在赶紧补上，本文的组织安排是这样的：先介绍rnn的BPTT所存在的问题，然后介绍最初... 博文
来自： 天道酬勤，做一个务实的理想主义者
jquery/js实现一个网页同时调用多个倒计时(最新的)

阅读数 44万+

jquery/js实现一个网页同时调用多个倒计时(最新的) 最近需要网页添加多个倒计时. 查阅网络,基本上都是千遍一律的不好用. 自己按需写了个.希望对大家有用. 有用请赞一个哦! //js ... 博文
来自： Websites
关于SpringBoot bean无法注入的问题（与文件包位置有关）

阅读数 17万+

问题场景描述整个项目通过Maven构建，大致结构如下： 核心Spring框架一个module spring-boot-base service和dao一个module server-core 提供系统... 博文
来自： 开发随笔
watershed分水岭算法的matlab例子详解

阅读数 8176

今天本来想试试mser算法的，结果没看懂。就先看看类似的fen'shui'l 博文
来自： 尽人事，听天命
追踪mysql操作记录时间1.

阅读数 5903

测试环境莫名其妙有几条重要数据被删除了，由于在binlog里面只看到是公用账号删除的，无法查询是那个谁在那个时间段登录的，就考虑怎么记录每一个MYSQL账号的登录信息，在MYSQL中，每个连接都会先执... 博文
来自： 路在脚下
solr查询优化（实践了一下效果比较明显）

阅读数 3万+

什么是filtercache？     solr应用中为了提高查询速度有可以利用几种cache来优化查询速度，分别是fieldValueCache，queryResultCache，documentC... 博文
来自： kuyuyingzi的专栏
caffe HDF5Data 层使用及数据生成

阅读数 1万+

有些时候，我们的输入不是标准的图像，而是其它一些格式，比如：频谱图、特征向量等等，这种情况下LMDB、Leveldb以及ImageData layer等就不好使了，这时候我们就需要一个新的输入接口——... 博文
来自： shuzfan的专栏
NLP系列(4)_朴素贝叶斯实战与进阶

阅读数 4万+

本文为朴素贝叶斯的实践和进阶篇，先丢了点干货，总结了贝叶斯方法的优缺点，应用场景，注意点和一般建模方法。紧接着对它最常见的应用场景，抓了几个例子，又来了一遍手把手系列，不管是对于文本主题分类、多分类问... 博文
来自： 寒小阳
MATLAB中注释一段程序

阅读数 2万+

在MATLAB中，可以注释一段程序。 使用“%{”和“%}”。 例如 %{ 。。。 %} 即可。 经典方法是用 if 0，但缺点是不够直观，注释掉的内容仍然保持代码的颜色。现在可以用 ... 博文
来自： 知识小屋
Objective-C培训 渗透测试教程 ReactJS课程 机器学习教程 CAVLC系数矩阵解析
mysql关联查询两次本表 native底部 react extjs glyph 图标 学习javacv之二 大数据学习系列之二

imred

原创
    87

粉丝
    23

喜欢
    48

评论
    37

等级：

访问：
    23万+ 

积分：
    3001 

排名：
    1万+

勋章：
联系方式
邮箱：im-red@qq.com
最新文章

    Qt在Linux下如何查找可用字体
    C++11中静态局部变量初始化的线程安全性
    Myer差分算法（Myer's diff algorithm）
    编辑距离算法和Levenshtein距离算法
    C++：shared_ptr的隐式转换

个人分类

    C 24篇
    C++ 34篇
    Qt 21篇
    Linux 27篇
    Algorithm 5篇
    DEBUG 15篇
    MySQL 2篇
    Server 1篇
    Memo 2篇
    Low-level 8篇
    Database 6篇
    Java 1篇
    其它 8篇
    Python 2篇

展开
归档

    2019年4月 3篇
    2019年3月 3篇
    2018年12月 5篇
    2018年11月 2篇
    2018年9月 4篇
    2018年7月 3篇
    2018年6月 2篇
    2018年5月 3篇
    2018年4月 2篇
    2017年12月 1篇
    2017年10月 3篇
    2017年8月 1篇
    2017年6月 5篇
    2017年4月 1篇
    2017年1月 4篇
    2016年12月 2篇
    2016年11月 2篇
    2016年10月 2篇
    2016年9月 2篇
    2016年8月 1篇
    2016年7月 6篇
    2016年6月 1篇
    2016年4月 4篇
    2016年2月 3篇
    2016年1月 2篇
    2015年12月 6篇
    2015年11月 1篇
    2015年10月 3篇
    2015年9月 1篇
    2015年5月 5篇
    2015年4月 2篇
    2015年3月 1篇
    2014年11月 2篇
    2014年9月 1篇
    2014年5月 2篇

展开
热门文章

    前置声明与C++头文件互相包含导致的error: 'xxx' does not name a type问题

    阅读数 25226
    虚拟机中 CentOS 无法上网（connect: network is unreachable）

    阅读数 22021
    C语言：数组和指针的区别

    阅读数 18242
    redis中的5种数据结构

    阅读数 11567
    使用 uwsgi + web.py 遇到 “--no python application found, check your startup logs for errors--”

    阅读数 11025

最新评论

    Qt中QComboBox下拉列表（...

    feiyangqingyun：最终效果是改的越来越丑
    一次尝试使用cmu sphinx做...

    G165945348：要想在win10上正常运行自带的continuous样例，需要把sphinxbase和pocketsphinx都编译成release版，同时把运行库编译参数指定为：多线程DLL（/MD）。
    在Linux下实现一个使用键盘控制...

    qq_36597125：很棒，收藏研究一波~
    Qt中QTabWidget隐藏某些...

    imred：[reply]u011351682[/reply] 没有
    Qt中QTabWidget隐藏某些...

    u011351682：你好，请问你做过在QTableWidget中插入控件，并一次多选包含控件的表格吗？被选中的空间颜色也要求有区别

程序人生

程序人生
CSDN资讯

CSDN资讯

kefu@csdn.net

QQ客服

客服论坛

400-660-0108

工作时间 8:30-22:00

关于我们招聘广告服务 网站地图

百度提供站内搜索 京ICP备19004658号

©1999-2019 北京创新乐知网络技术有限公司

经营性网站备案信息
网络110报警服务

北京互联网违法和不良信息举报中心

中国互联网举报中心家长监护

