

    首页
    博客
    学院
    下载
    图文课
    论坛
    APP
    问答
    商城
    VIP会员
    活动
    招聘
    ITeye
    GitChat

    写博客
    小程序
    消息

原	
C++的返回值优化（RVO，Return Value Optimization）
2018年12月31日 22:51:28 imred 阅读数：171 标签： C++ RVO 更多
个人分类： C++
编辑
版权声明：转载请注明来源： https://blog.csdn.net/imred/article/details/85492788
前言

大家都知道“过早的优化是万恶之源”这句话，然而我相信其中的大多数人都不知道自己是不是在做过早的优化。我也无法准确的定义什么叫做“过早的优化”，但我相信这“过早的优化”要么是得不偿失的，要么干脆是有害无利的。今天我就想举个我认为是“过早的优化”的例子。
从函数返回值

为了从一个函数得到运行结果，常规的途径有两个：通过返回值和通过传入函数的引用或指针（当然还可以通过全局变量或成员变量，但我觉得这算不上是什么好主意）。

通过传给函数一个引用或指针来承载返回值在很多情况下是无可厚非的，毕竟有时函数需要将多个值返回给用户。除了这种情况之外，我觉得应当尽量做到参数作为函数输入，返回值作为函数输出（这不是很自然的事情吗？）。然而，我们总能看到一些“突破常规”的做法：

首先定义Message类：

struct Message
{
    int a;
    int b;
    int c;
    int d;
    int e;
    int f;
};

    1
    2
    3
    4
    5
    6
    7
    8
    9

为了从某个地方（比如一个队列）得到一个特定Message对象，有些人喜欢写一个这样的getMessage：

void getMessage(Message &msg); // 形式1

    1

虽然只有一个返回值，但仍然是通过传入函数的引用返回给调用者的。

为什么要这样呢？“嗯，为了提高性能。你知道，要是这样定义函数，返回Message对象时必须要构造一个临时对象，这对性能有影响。”

Message getMessage(); // 形式2

    1

我们先不讨论这带来了多少性能提升，先看看形式1相对形式2带来了哪些弊端。我认为有两点：
1. 可读性变差

略（我希望你能和我一样认为这是显而易见的）。
2. 将对象的初始化划分成了两个步骤

调用形式1时，你必然要这样：

Message msg;     // S1
getMessage(msg); // S2

    1
    2

这给维护者带来了犯错的机会：一些需要在S2语句后面对msg进行的操作有可能会被错误的放在S1和S2之间。
如果是形式2，维护者就不可能犯这种错误：

Message msg = getMessage();

    1

好，现在我们来看性能，形式2真的相对形式1性能更差吗？对于下面的代码：

#include <stdio.h>

struct Message
{
    Message()
    { 
        printf("Message::Message() is called\n"); 
    }
    Message(const Message &)
    {
        printf("Message::Message(const Message &msg) is called\n");
    }
    Message& operator=(const Message &)
    {
        printf("Message::operator=(const Message &) is called\n");
    }
    ~Message()
    {
        printf("Message::~Message() is called\n");
    }
    int a;
    int b;
    int c;
    int d;
    int e;
    int f;
};

Message getMessage()
{
    Message result;
    result.a = 0x11111111;

    return result;
}

int main()
{
    Message msg = getMessage();
    return 0;
}

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    20
    21
    22
    23
    24
    25
    26
    27
    28
    29
    30
    31
    32
    33
    34
    35
    36
    37
    38
    39
    40
    41

你认为运行时会输出什么呢？是不是这样：

Message::Message() is called
Message::Message(const Message &msg) is called
Message::~Message() is called
Message::~Message() is called

    1
    2
    3
    4

其中，第一行是临时对象result构造时打印，第二行是将临时对象赋给msg时打印，第三行是临时对象result析构时打印，第四行是msg析构时打印。

然而使用GCC 7.3.0版本使用O0（即关闭优化）编译上述代码后，运行结果为：

Message::Message() is called
Message::~Message() is called

    1
    2

并没有像预期的输出那样。

如果使用MSVC2017编译，且关闭优化（/Od），确实可以得到预期输入，但是一旦打开优化（/O2），输出就和GCC的一样了。

我们看看实际上生成了什么代码（使用GCC编译）：

(gdb) disassemble main
Dump of assembler code for function main():
   0x0000000000000776 <+0>:	push   %rbp
   0x0000000000000777 <+1>:	mov    %rsp,%rbp
   0x000000000000077a <+4>:	push   %rbx
   0x000000000000077b <+5>:	sub    $0x28,%rsp
   0x000000000000077f <+9>:	mov    %fs:0x28,%rax
   0x0000000000000788 <+18>:	mov    %rax,-0x18(%rbp)
   0x000000000000078c <+22>:	xor    %eax,%eax
   0x000000000000078e <+24>:	lea    -0x30(%rbp),%rax             #将栈上地址-0x30(%rbp)传给getMessage函数
   0x0000000000000792 <+28>:	mov    %rax,%rdi
   0x0000000000000795 <+31>:	callq  0x72a <getMessage()>
   0x000000000000079a <+36>:	mov    $0x0,%ebx
   0x000000000000079f <+41>:	lea    -0x30(%rbp),%rax
   0x00000000000007a3 <+45>:	mov    %rax,%rdi
   0x00000000000007a6 <+48>:	callq  0x7e4 <Message::~Message()>
   0x00000000000007ab <+53>:	mov    %ebx,%eax
   0x00000000000007ad <+55>:	mov    -0x18(%rbp),%rdx
   0x00000000000007b1 <+59>:	xor    %fs:0x28,%rdx
   0x00000000000007ba <+68>:	je     0x7c1 <main()+75>
   0x00000000000007bc <+70>:	callq  0x5f0 <__stack_chk_fail@plt>
   0x00000000000007c1 <+75>:	add    $0x28,%rsp
   0x00000000000007c5 <+79>:	pop    %rbx
   0x00000000000007c6 <+80>:	pop    %rbp
   0x00000000000007c7 <+81>:	retq   
End of assembler dump.
(gdb) disassemble getMessage 
Dump of assembler code for function getMessage():
   0x000000000000072a <+0>:	push   %rbp
   0x000000000000072b <+1>:	mov    %rsp,%rbp
   0x000000000000072e <+4>:	sub    $0x20,%rsp
   0x0000000000000732 <+8>:	mov    %rdi,-0x18(%rbp)                 #将main函数传入的栈上地址保存到-0x18(%rbp)处
   0x0000000000000736 <+12>:	mov    %fs:0x28,%rax
   0x000000000000073f <+21>:	mov    %rax,-0x8(%rbp)
   0x0000000000000743 <+25>:	xor    %eax,%eax
   0x0000000000000745 <+27>:	mov    -0x18(%rbp),%rax             #将main函数传入的栈上地址传给Message::Message()函数
   0x0000000000000749 <+31>:	mov    %rax,%rdi
   0x000000000000074c <+34>:	callq  0x7c8 <Message::Message()>
   0x0000000000000751 <+39>:	mov    -0x18(%rbp),%rax
   0x0000000000000755 <+43>:	movl   $0x11111111,(%rax)
   0x000000000000075b <+49>:	nop
   0x000000000000075c <+50>:	mov    -0x18(%rbp),%rax
   0x0000000000000760 <+54>:	mov    -0x8(%rbp),%rdx
   0x0000000000000764 <+58>:	xor    %fs:0x28,%rdx
   0x000000000000076d <+67>:	je     0x774 <getMessage()+74>
   0x000000000000076f <+69>:	callq  0x5f0 <__stack_chk_fail@plt>
   0x0000000000000774 <+74>:	leaveq 
   0x0000000000000775 <+75>:	retq   
End of assembler dump.

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    20
    21
    22
    23
    24
    25
    26
    27
    28
    29
    30
    31
    32
    33
    34
    35
    36
    37
    38
    39
    40
    41
    42
    43
    44
    45
    46
    47
    48
    49

可以看出来，在getMessage函数中构造的对象实际上位于main函数的栈帧上，并没有额外构造一个Message对象。这是因为开启了所谓的返回值优化（RVO，Return Value Optimization）的缘故。你想得到的效果编译器已经自动帮你完成了，你不必再牺牲什么。
RVO

对于我们这些用户来说，RVO并不是什么特别复杂的机制，主流的GCC和MSVC均支持，也没什么特别需要注意的地方。它存在的目的是优化掉不必要的拷贝复制函数的调用，即使拷贝复制函数有什么副作用，例如上面代码中的打印语句，这可能是唯一需要注意的地方了。从上面的汇编代码中可以看出来，在GCC中，其基本手段是直接将返回的对象构造在调用者栈帧上，这样调用者就可以直接访问这个对象而不必复制。

RVO是有限制条件的，在某些情况下无法进行优化，在一篇关于MSVC2005的RVO技术的文章中，提到了3点导致无法优化的情况：
1. 函数抛异常

关于这点，我是有疑问的。文章中说如果函数抛异常，开不开RVO结果都一样。如果函数抛异常，无法正常的返回，我当然不会要求编译器去做RVO了。
2. 函数可能返回具有不同变量名的对象

例如：

Message getMessage_NoRVO1(int in)
{
    Message msg1;
    msg1.a = 1;

    Message msg2;
    msg2.a = 2;

    if (in % 2)
    {
        return msg1;
    }
    else
    {
        return msg2;
    }
}

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10
    11
    12
    13
    14
    15
    16
    17

经过验证，在GCC上确实也是这样的，拷贝构造函数被调用了。但这种情况在很多时候应该都是可以通过重构避免的。

Message::Message() is called
Message::Message() is called
Message::Message(const Message &msg) is called
Message::~Message() is called
Message::~Message() is called
Message::~Message() is called

    1
    2
    3
    4
    5
    6

3. 函数有多个出口

例如：

Message getMessage_NoRVO2(int in)
{
    Message msg;
    if (in % 2)
    {
        return msg;
    }
    msg.a = 1;
    return msg;
}

    1
    2
    3
    4
    5
    6
    7
    8
    9
    10

这个在GCC上验证发现RVO仍然生效，查看汇编发现只有一个retq指令，多个出口被优化成一个了。

参考文档：

https://en.wikipedia.org/wiki/Copy_elision#cite_ref-moreeffcpp_6-1

https://en.cppreference.com/w/cpp/language/copy_elision

https://docs.microsoft.com/en-us/previous-versions/ms364057(v=vs.80)
阅读更多 收藏 分享
C++编译器优化-返回值优化

1557

本文转自http://www.cnblogs.com/Azhu/archive/2012/07/14/2591489.html、http://www.programlife.net/cpp-retur...
来自： zhouwei1221q
RVO(Return Value Optimization)和NRVO(Named Return Value Optimization)

阅读数 935

中文解释：RVO：返回值优化                   NRVO：具命返回值优化具体示例如下：#includeclassA{public: A(inti):m_a(i) { printf(... 博文
来自： diaolingle的专栏
关于Named Return Value（NRV）optimization－返回值优化	

阅读数 1845

首先看一下下面的程序： #include iostream>using namespace std;class A ...{public:    A()    ...{          cout  ... 博文
来自： 一刀的后院
C++返回值优化-Return Value Optimization	

阅读数 99

C++返回值优化-ReturnValueOptimizationC++中的一些小细节比较多。这里看下返回值优化。代码usingnamespacestd;classRVO{staticintcount_... 博文
来自： BetterWorld的专栏
C++优化--按值返回和返回值优化	

阅读数 2004

C++和C语言相比，最为人诟病的就是其性能问题，通常一条C语言经编译器解释后，可以固定转换成5—10条汇编语言，但是一条C++语言，就没有这么幸运了，可能会是3条汇编语言，也可能是300条。C++影响... 博文
来自： SeeSeaBee的专栏
C++的各种优化	

阅读数 649

前言　　众所周知，有一些可（bian）爱（tai）的题单纯使用那些算法会T，所以需要用一些神奇的优化。读入优化　　既用过pascal，又用过c++的选手们都可以感受到知道，c++虽然快，但它的读入sc... 博文
来自： qq_36551189的博客
详解RVO与NRVO（区别于网上常见的RVO）

阅读数 4947

一直以来对RVO与NRVO以及编译器的优化操作之间的关系都不太分得清。这一次想了两天，查看了若干资料以后，总算弄清楚了。1.RVO（ReturnValueOptimization）先来看一下维基百科上... 博文
来自： Virtual_Func的博客
C++中函数的Named Return Value优化理解

阅读数 132

#include&amp;lt;iostream&amp;gt;usingnamespacestd;classHehe{ public: Hehe():i(0){cout&amp;lt;&amp;l... 博文
来自： qq_39422041的博客
理解NRV优化	

阅读数 2148

大纲： 函数返回局部对象的拷贝的一般实现方式。 NRV（NamedReturnValue）优化。 NRV优化触发的疑问。一、函数返回局部对象的拷贝的一般实现方式比如有这么一段函数定义：classX;X... 博文
来自： 麻辣丝瓜的世界
程序的内存布局——函数调用栈的那点事-返回值优化-RVO-具名返回值优化-NRV-参数压栈

阅读数 47

[注]此文是《程序员的自我修养》的读书总结，其中掺杂着一些个人的理解，若有不对，欢迎拍砖。  程序的内存布局 现代的应用程序都运行在一个虚拟内存空间里，在32位的系统里，这个内存空间拥有4GB的寻址能... 博文
来自： 随意的风的专栏
C++中的RVO优化和NRVO优化	

阅读数 68

RVO(returnvalueoptimization)和NRVO(namedreturnvalueoptimization)是C++在处理一个函数返回类对象并将返回值赋给另一个对象时，为了减少拷贝构... 博文
来自： Likes的博客
DCSnail-蜗牛
关注
DCSnail-蜗牛

225篇文章

排名:6000+

caimouse
关注
caimouse

1911篇文章

排名:23

wujinggrt关注
wujinggrt

10篇文章

排名:千里之外

麻辣丝瓜关注
麻辣丝瓜

8篇文章

排名:千里之外

返回值优化RVO	

阅读数 614

返回值优化（ReturnValueOptimization，简称RVO）是一种编译器优化机制，主要是为了减少临时对象的产生。... 博文
来自： 二货磁铁
c++ 性能优化策略

阅读数 6435

1关于继承：不可否认良好的抽象设计可以让程序更清晰，代码更看起来更好，但是她也是有损失的，在继承体系中子类的创建会调用父类的构造函数，销毁时会调用父类的析构函数，这种消耗会随着继承的深度直线上升，所以... 博文
来自： D_Guco的专栏
C++优化三板斧:Three Optimization Tips for C++	

阅读数 1233

C++优化三板斧的原文ThisisanapproximatetranscriptofmytalkatFacebookNYConDecember4,2012,whichdiscussesoptimiza... 博文
来自： 踏月寻玉
【C/C++】代码优化技巧

阅读数 236

转自：http://www.cnblogs.com/lizhenghn/p/3969531.html1.牢记Ahmdal定律　　　　　　　　　　　　　　　　　　funccost表示是函数func的运行... 博文
来自： AMG_GT的博客
程序优化——C/C++参数优化	

阅读数 376

C/C++变量优化：C/C++语言中变量依据其定义的方式不同，其存放位置可以分为寄存器、栈区、堆区和静态存储区三种区域。（1）寄存器上分配。当函数中定义的局部变量不多，且没有对局部变量的取地址操作时，... 博文
来自： halikuiyin的博客
C++中的RVO和NRVO优化	

阅读数 680

RVO(returnvalueoptimization)和NRVO(namedreturnvalueoptimization)是C++在处理一个函数返回类对象并将返回值赋给另一个对象时，为了减少拷贝构... 博文
来自： rlyhaha的博客
C++返回值优化RVO	

阅读数 5

返回值优化，是一种属于编译器的技术，它通过转换源代码和对象的创建来加快源代码的执行速度。RVO=returnvalueoptimization。测试平台：STM32F103VG+Keil5.15背景：... 博文
来自： weixin_34018169的博客
C语言的返回值return总结

阅读数 2487

return是C++预定义的语句，它提供了种植函数执行的一种放大。当return语句提供了一个值时，这个值就成为函数的返回值.说到return,有必要提及主函数的定义,下面是从网络上找到的资料,好好消... 博文
来自： 子寒
c语言中return返回值的用法总结

阅读数 1926

return返回值的意义就是把return&amp;lt;表达式内容&amp;gt;返回给调用return的函数。*例如： voidtest(inti,intj);{returni+j;printf(... 博文
来自： sing_Hwang的博客
C++中的返回值优化(RVO)

阅读数 299

http://www.programlife.net/cpp-return-value-optimization.html 博文
来自： songtao_yu的专栏
C++中的返回值优化（RVO）

阅读数 2564

C++的返回值优化RVO 博文
来自： Sad_Sugar的专栏
C++程序常见的性能调优方式

阅读数 1235

转载自：http://www.708luo.com/?p=36冗余的变量拷贝相对C而言，写C++代码经常一不小心就会引入一些临时变量，比如函数实参、函数返回值。在临时变量之外，也会有其他一些情况会带来... 博文
来自： 狂奔之林的博客
【代码优化】C\C++代码优化的27个建议

阅读数 573

1.记住阿姆达尔定律：funccost是函数func运行时间百分比，funcspeedup是你优化函数的运行的系数。所以，如果你优化了函数TriangleIntersect执行40%的运行时间，使它运... 博文
来自： AG的博客
C/C++代码优化方案

阅读数 3080

目录1、选择合适的算法和数据结构32、使用尽量小的数据类型33、减少运算的强度3（1）查表3（2）求余运算4（3）平方运算4（4）用移位实现乘除法运算4（5）避免不必要的整数除法5（6）使用增量和减量... 博文
来自： CHAOS' NOTE
C++性能优化实践

阅读数 692

C++性能优化实践 博文
来自： jacke121的专栏
RFS的web自动化验收测试——第10讲 用户关键字User Keyword（2）

阅读数 2万+

引言：什么是RFS——RobotFramework+Selenium2library，本系列主要介绍web自动化验收测试方面。（ @齐涛-道长 新浪微博） 继续介绍UserKeyword里面的Tear... 博文
来自： 老道长的测试生活
Robot Framework通过return value实现参数在关键字间的传递

阅读数 2475

RobotFramework中returnvalue(见下图中的${query_custid})设置后，此关键字（如A）在其他关键字(如B)可以直接被引用，见下图。可以在如下关键字中直接引用上一关键字... 博文
来自： xiaoning800的博客
C++编译器优化：Copy Elision（省略不必要的拷贝）

阅读数 4916

为避免对临时对象进行不必要的拷贝，C++编译器常使用一种名为CopyEllision（拷贝去除）的优化技术，该技术至少包括以下两项内容： 返回值优化（RVO），即通过将返回值所占空间的分配地点从被调用... 博文
来自： zwvista的专栏
返回值与输出参数比较（return value or out parameter）

阅读数 1001

函数返回处理值有两种方式，一种直接利用函数返回值返回；另一种通过输出参数返回，一般传入的值为引用或者指针。publicFooFunction1();//函数返回值的形式publicvoidFuncti... 博文
来自： awesomels的博客
典型粒子群优化算法（particle swarm optimization,PSO）

阅读数 7104

随着牛顿法、梯度共轭、单纯形法等传统优化方法无法满足计算需求，群智能优化算法作为现代智能计算的一类重要方法已经受到越来越多的关注。群智能优化通过模拟社会性昆虫的各种群体行为，利用群体中个体之间的信息交... 博文
来自： henghane的博客
C++编译器到底能帮我们把代码优化到什么程度？
01-02

太长了，看能贴过来不。。 http://blog.csdn.net/hengyunabc/article/details/7170865 一个简单的累加求和程序： TYPE S=0; for(int 论坛
新的职业目标，以及C++性能优化	

阅读数 458

2018年1月1号，距离笔者给自己制定的职业方向“走专家路线”已经有两年半时间。这些时日笔者也是尽自己的实际情况来达成目标。但是达成目标的速度并不如我意。当笔者给自己2017年的工作进行总结梳理之后，... 博文
来自： aflyeaglenku的博客
C++ 在配置中的优化,程序优化	

阅读数 831

1.属性->配置属性->C/C++->代码生成：  启用增强指令集，可选用 流式处理SIMD扩展2(/arch:SSE2)(/arch:SSE2)、流式处理SIMD扩展2(/arch:SSE2)(/a... 博文
来自： 野狼位位的博客
C/C++优化	

阅读数 1235

在C++ 内存优化是数据结构设计 速度优化是尽量避免创建临时对象根据实际需要定制动态内存管理模块 用整形运算代替浮点运算 引用计数内存优化：关系到创建临时变量或创建动态变量（指针使用）等 速度优化：是... 博文
来自： DOOM
C++高效编程：内存与性能优化	09-13
C++高效编程：内存与性能优化 C++高效编程：内存与性能优化 C++高效编程：内存与性能优化 C++高效编程：内存与性能优化
下载
编译器自动优化——为什么我的C++编译器不调用拷贝构造函数了？

阅读数 397

今天在学习《深入理解C++11》中关于移动构造函数的内容时，发现了这么一个问题：#include#include#include#include#include#includeusingnamespa... 博文
来自： hiyajo_salieri的博客
编译器_keil的优化选项问题

阅读数 1万+

最近发现在keil编译的时候，出现莫名的问题，貌似代码有被优化掉的问题，后来查了下相关的资料，貌似懂了点。我选择的是默认的default优化方式，上网看了下，默认的是level2级别优化，最后选择le... 博文
来自： CSDN-MarkYang
c#中获取存储过程的返回值(return Value)

阅读数 2171

              stringconnStr="server=kofo;database=pubs;uid=sa;pwd=kofo123";             SqlConnectio... 博文
来自： Yao,Mane
Boost Python 包装C++函数供Python使用时返回值为引用类型的解决方案

阅读数 3617

作者：华亮    地址：http://blog.csdn.net/cedricporter我们有一段C++代码Aaaa;A&DoSomethingWithA(inta){ aaa.Set(12); r... 博文
来自： 某花
Optimization for Machine Learning 机器学习优化方法（英文原版） 11-30
机器学习优化方法，Optimization　for　Machine　Learning
下载
C++ 读入优化与输出优化 模板

阅读数 1万+

简介C++是一种神奇的编程语言……自然，读入和输出也有着许多种形式：如：scanf()，cin>>，cout，cout... 博文
来自： Felix-Lee的博客
c++返回值优化的问题

阅读数 258

本文总结以下我对返回值优化的学习，主要参考了下面这个链接的学习内容。[C++中的返回值优化（RVO）]命名返回值优化（NRVO）二话不说，先上代码：#includeclassA{public:A(){... 博文
来自： Kang_TJU的博客
c++ 高效编程：内存与性能优化 源码 代码 实例 03-12
专家作者Rene Alexander与Graham Benstey将在本书中详尽阐述C++优化技术和技巧：学习书中的现实应用程序、实用诀窍、解决方案与技术，可轻松编写高效而理想的应用程序、阅读本书后，
下载
C++优化 —— 字符串优化	

阅读数 1099

这篇博客介绍了C++中常用的用于优化C++性能的手法。背景最近开始读OptimizedC++，因此也会开始记录一些读书笔记。然后呢……由于入职鹅厂，考虑到项目保密这一块，因此以后的UE4相关的博客可能... 博文
来自： 谁允许你直视本大叔的？
C++性能优化	

阅读数 3590

本文介绍可以提高C++性能的一些方法，比如virtual函数、返回值优化等。 博文
来自： 北海-叶明的专栏
条款20：协助完成"返回值优化（RVO）"

阅读数 549

条款20：协助完成"返回值优化（RVO）"2011-01-1113:39侯捷译电子工业出版社 我要评论(0) 字号：T | T综合评级：想读(2)  在读(0)  已读(2)   品书斋鉴(0)   ... 博文
来自： jfkidear的专栏
关于构造函数没有返回值的问题

阅读数 1566

为什么构造函数不能有返回值？摘自>  “构造函数是一种很特殊的函数，因为他没有返回值。这和‘返回值为void’有极大的差别。返回void时，一般函数并不返回任何东西，但是一般的函数能够选择是否要返回些... 博文
来自： moshansk的专栏
问题:编译策略之代码逻辑顺序不正确(Optimization Level)

阅读数 3057

曾经遇到过一个问题,运行一段代码发现执行的逻辑顺序不正确,而且在添加了其他语句后,还会有不同的顺序,但是都是不正确的.... 博文
来自： DCSnail-蜗牛
C++构造函数传参与返回值时的优化	

阅读数 348

总结C++对传参和传返回值时构造的优化处理这里用具体例子说明，简单定义一个日期类：classDate{public:Date(intyear=0,intmonth=0,intday=0):_year(... 博文
来自： Guijun6的博客
Android实战技巧之三十三：android.hardware.camera2使用指南

阅读数 6万+

API 21中将原来的camera API弃用转而推荐使用新增的camera2 API，这是一个大的动作，因为新API换了架构，让开发者用起来更难了。 先来看看camera2包架构示意图： 这... 博文
来自： 懒人的技术笔记
使用Faster-Rcnn进行目标检测(实践篇)

阅读数 6万+

原理上一篇文章，已经说过了，大家可以参考一下，Faster-Rcnn进行目标检测(原理篇)实验我使用的代码是python版本的Faster Rcnn，官方也有Matlab版本的,链接如下:py-fas... 博文
来自： GavinZhou的博客
DirectX修复工具增强版

阅读数 193万+

最后更新：2018-12-20 DirectX修复工具最新版：DirectX Repair V3.8 增强版  NEW! 版本号：V3.8.0.11638 大小: 107MB/7z格式压缩，18... 博文
来自： VBcom的专栏
C/C++ 实现文件透明加解密

阅读数 1万+

　　  今日遇见一个开超市的朋友，真没想到在高校开超市一个月可以达到月净利润50K，相比起我们程序员的工资，真是不可同日而语，这个世道啊，真是做程序员不如经商开超市，我们高科技的从业者，真是造原子弹不... 博文
来自： 尹成的技术博客
【深度剖析HMM（附Python代码）】1.前言及隐马尔科夫链HMM的背景

阅读数 1万+

1. 前言 隐马尔科夫HMM模型是一类重要的机器学习方法，其主要用于序列数据的分析，广泛应用于语音识别、文本翻译、序列预测、中文分词等多个领域。虽然近年来，由于RNN等深度学习方法的发展，HMM模型... 博文
来自： tostq的专栏
squirrel校园二手交易平台

阅读数 1万+

squirrel校园二手交易平台 （适合寻找SSM项目练手的你。） 项目起源： 　　期末的课程设计，三人一组，我和两个舍友，一时起兴，决定做一个校园二手交易平台，一开始兴致与激情满满，可... 博文
来自： HLK_1135的博客
关于requests的session方法无法保持cookie的问题。

阅读数 3万+

最近在做爬虫的时候遇到了一个问题，在用requests的session方法保持cookie的时候发现requests不能保持手动构建的cookie。起初以为requests只能自动保持由服务器返回的s... 博文
来自： falseen的博客
QEMU 简单使用

阅读数 8418

安装： yum install qemu 创建image文件： qemu-img create -f qcow2 guest.qcow2 3G 安装linux： 1）下载一个镜像文件，http:... 博文
来自： 务远的博客
搭建图片服务器《二》-linux安装nginx

阅读数 3万+

nginx是个好东西，Nginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambl... 博文
来自： maoyuanming0806的博客
linux上安装Docker(非常简单的安装方法)

阅读数 20万+

最近比较有空，大四出来实习几个月了，作为实习狗的我，被叫去研究Docker了，汗汗！ Docker的三大核心概念：镜像、容器、仓库 镜像：类似虚拟机的镜像、用俗话说就是安装文件。 容器：类似一个轻量... 博文
来自： 我走小路的博客
强连通分量及缩点tarjan算法解析

阅读数 57万+

强连通分量： 简言之 就是找环（每条边只走一次，两两可达） 孤立的一个点也是一个连通分量   使用tarjan算法 在嵌套的多个环中优先得到最大环( 最小环就是每个孤立点）   定义： int Ti... 博文
来自： 九野的博客
LSTM简介以及数学推导(FULL BPTT)

阅读数 8万+

前段时间看了一些关于LSTM方面的论文，一直准备记录一下学习过程的，因为其他事儿，一直拖到了现在，记忆又快模糊了。现在赶紧补上，本文的组织安排是这样的：先介绍rnn的BPTT所存在的问题，然后介绍最初... 博文
来自： 天道酬勤，做一个务实的理想主义者
jquery/js实现一个网页同时调用多个倒计时(最新的)

阅读数 44万+

jquery/js实现一个网页同时调用多个倒计时(最新的) 最近需要网页添加多个倒计时. 查阅网络,基本上都是千遍一律的不好用. 自己按需写了个.希望对大家有用. 有用请赞一个哦! //js ... 博文
来自： Websites
关于SpringBoot bean无法注入的问题（与文件包位置有关）

阅读数 17万+

问题场景描述整个项目通过Maven构建，大致结构如下： 核心Spring框架一个module spring-boot-base service和dao一个module server-core 提供系统... 博文
来自： 开发随笔
watershed分水岭算法的matlab例子详解

阅读数 8176

今天本来想试试mser算法的，结果没看懂。就先看看类似的fen'shui'l 博文
来自： 尽人事，听天命
追踪mysql操作记录时间1.

阅读数 5903

测试环境莫名其妙有几条重要数据被删除了，由于在binlog里面只看到是公用账号删除的，无法查询是那个谁在那个时间段登录的，就考虑怎么记录每一个MYSQL账号的登录信息，在MYSQL中，每个连接都会先执... 博文
来自： 路在脚下
solr查询优化（实践了一下效果比较明显）

阅读数 3万+

什么是filtercache？     solr应用中为了提高查询速度有可以利用几种cache来优化查询速度，分别是fieldValueCache，queryResultCache，documentC... 博文
来自： kuyuyingzi的专栏
caffe HDF5Data 层使用及数据生成

阅读数 1万+

有些时候，我们的输入不是标准的图像，而是其它一些格式，比如：频谱图、特征向量等等，这种情况下LMDB、Leveldb以及ImageData layer等就不好使了，这时候我们就需要一个新的输入接口——... 博文
来自： shuzfan的专栏
NLP系列(4)_朴素贝叶斯实战与进阶

阅读数 4万+

本文为朴素贝叶斯的实践和进阶篇，先丢了点干货，总结了贝叶斯方法的优缺点，应用场景，注意点和一般建模方法。紧接着对它最常见的应用场景，抓了几个例子，又来了一遍手把手系列，不管是对于文本主题分类、多分类问... 博文
来自： 寒小阳
MATLAB中注释一段程序

阅读数 2万+

在MATLAB中，可以注释一段程序。 使用“%{”和“%}”。 例如 %{ 。。。 %} 即可。 经典方法是用 if 0，但缺点是不够直观，注释掉的内容仍然保持代码的颜色。现在可以用 ... 博文
来自： 知识小屋
图像处理优化 C/C++ C/C++培训 C/C++入门教程 C/C++课程
mysql关联查询两次本表 native底部 react extjs glyph 图标 java学习return java学习返回值

imred

原创
    87

粉丝
    23

喜欢
    48

评论
    37

等级：

访问：
    23万+ 

积分：
    3001 

排名：
    1万+

勋章：
联系方式
邮箱：im-red@qq.com
最新文章

    Qt在Linux下如何查找可用字体
    C++11中静态局部变量初始化的线程安全性
    Myer差分算法（Myer's diff algorithm）
    编辑距离算法和Levenshtein距离算法
    C++：shared_ptr的隐式转换

个人分类

    C 24篇
    C++ 34篇
    Qt 21篇
    Linux 27篇
    Algorithm 5篇
    DEBUG 15篇
    MySQL 2篇
    Server 1篇
    Memo 2篇
    Low-level 8篇
    Database 6篇
    Java 1篇
    其它 8篇
    Python 2篇

展开
归档

    2019年4月 3篇
    2019年3月 3篇
    2018年12月 5篇
    2018年11月 2篇
    2018年9月 4篇
    2018年7月 3篇
    2018年6月 2篇
    2018年5月 3篇
    2018年4月 2篇
    2017年12月 1篇
    2017年10月 3篇
    2017年8月 1篇
    2017年6月 5篇
    2017年4月 1篇
    2017年1月 4篇
    2016年12月 2篇
    2016年11月 2篇
    2016年10月 2篇
    2016年9月 2篇
    2016年8月 1篇
    2016年7月 6篇
    2016年6月 1篇
    2016年4月 4篇
    2016年2月 3篇
    2016年1月 2篇
    2015年12月 6篇
    2015年11月 1篇
    2015年10月 3篇
    2015年9月 1篇
    2015年5月 5篇
    2015年4月 2篇
    2015年3月 1篇
    2014年11月 2篇
    2014年9月 1篇
    2014年5月 2篇

展开
热门文章

    前置声明与C++头文件互相包含导致的error: 'xxx' does not name a type问题

    阅读数 25226
    虚拟机中 CentOS 无法上网（connect: network is unreachable）

    阅读数 22021
    C语言：数组和指针的区别

    阅读数 18242
    redis中的5种数据结构

    阅读数 11567
    使用 uwsgi + web.py 遇到 “--no python application found, check your startup logs for errors--”

    阅读数 11025

最新评论

    Qt中QComboBox下拉列表（...

    feiyangqingyun：最终效果是改的越来越丑
    一次尝试使用cmu sphinx做...

    G165945348：要想在win10上正常运行自带的continuous样例，需要把sphinxbase和pocketsphinx都编译成release版，同时把运行库编译参数指定为：多线程DLL（/MD）。
    在Linux下实现一个使用键盘控制...

    qq_36597125：很棒，收藏研究一波~
    Qt中QTabWidget隐藏某些...

    imred：[reply]u011351682[/reply] 没有
    Qt中QTabWidget隐藏某些...

    u011351682：你好，请问你做过在QTableWidget中插入控件，并一次多选包含控件的表格吗？被选中的空间颜色也要求有区别

CSDN学院

CSDN学院
CSDN企业招聘

CSDN企业招聘

kefu@csdn.net

QQ客服

客服论坛

400-660-0108

工作时间 8:30-22:00

关于我们招聘广告服务 网站地图

百度提供站内搜索 京ICP备19004658号

©1999-2019 北京创新乐知网络技术有限公司

经营性网站备案信息
网络110报警服务

北京互联网违法和不良信息举报中心

中国互联网举报中心家长监护

